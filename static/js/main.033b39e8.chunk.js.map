{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","display","carryNumber","previousOperation","resetDisplayOnNextClick","aNumber","this","setState","anOperation","num1","num2","parseFloat","result","className","readOnly","placeholder","value","onClick","operation","numKeyInput","React","Component","App","src","process","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.033b39e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./componentStyles/global.css\";\r\nimport \"./componentStyles/grid.css\";\r\n\r\nclass Calculator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      display: \"\",\r\n      carryNumber: null,\r\n      previousOperation: \"\",\r\n      resetDisplayOnNextClick: false,\r\n    };\r\n  }\r\n  numKeyInput(aNumber) {\r\n    /* \r\n      Input from number keys go throug this function.\r\n      Input: aNumber - string [0-9 and dot]\r\n      Output: void -> sets state for display and resetDisplayOnNextClick.\r\n      **Sets resetDisplayOnNextClick to false once the display has been clearned\r\n    */\r\n    if (this.state.resetDisplayOnNextClick) {\r\n      this.setState({ display: \"\", resetDisplayOnNextClick: false }, () => {\r\n        this.setState({ display: this.state.display + aNumber });\r\n      });\r\n    } else {\r\n      this.setState({ display: this.state.display + aNumber });\r\n    }\r\n  }\r\n\r\n  operation(anOperation) {\r\n    /* \r\n      Input from operation keys go through this funciton.\r\n        Also this function is in charge of determining which operation\r\n        is being carried out and executes the neccessary logic.\r\n\r\n        Takes arguemts: anOperation - String [add, subtract, divide, multiply,  equal, and clear]\r\n        output: void - Uses Swtich statement to determine which arithmetic operation to preform.\r\n    */\r\n    this.setState({ resetDisplayOnNextClick: true });\r\n    const num1 = this.state.carryNumber;\r\n    const num2 = parseFloat(this.state.display);\r\n    let result = 0;\r\n    let previousOperation = this.state.previousOperation;\r\n\r\n    switch (anOperation) {\r\n      case \"add\":\r\n        result = num1 + num2;\r\n        this.setState({ previousOperation: \"add\" });\r\n        break;\r\n\r\n      case \"subtract\":\r\n        if (this.state.carryNumber === null) {\r\n          result = num2;\r\n        } else {\r\n          result = num1 - num2;\r\n        }\r\n        this.setState({ previousOperation: \"subtract\" });\r\n        break;\r\n\r\n      case \"multiply\":\r\n        if (this.state.carryNumber === null) {\r\n          result = num2;\r\n        } else {\r\n          result = num1 * num2;\r\n        }\r\n        this.setState({ previousOperation: \"multiply\" });\r\n        break;\r\n\r\n      case \"divide\":\r\n        if (this.state.carryNumber === null) {\r\n          result = num2;\r\n        } else {\r\n          result = num1 / num2;\r\n        }\r\n        this.setState({ previousOperation: \"divide\" });\r\n        break;\r\n\r\n      case \"clear\":\r\n        // Clear the display\r\n        this.setState({ display: \"\", carryNumber: null });\r\n        return;\r\n\r\n      case \"equal\":\r\n        /**\r\n         * This is fired whenever the user clicks on the equals operator.\r\n         * It checks to see which operation was last used and then preforms\r\n         * the corresponding calculation and once finished sets the state's\r\n         * carryNumber to null to prepare for the next operations\r\n         */\r\n        if (previousOperation === \"add\") {\r\n          result = num1 + num2;\r\n        } else if (previousOperation === \"subtract\") {\r\n          result = num1 - num2;\r\n        } else if (previousOperation === \"multiply\") {\r\n          result = num1 * num2;\r\n        } else if (previousOperation === \"divide\") {\r\n          result = num1 / num2;\r\n        }\r\n        this.setState({ display: result, carryNumber: null });\r\n        return;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      display: result,\r\n      carryNumber: result,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"calWrapper\">\r\n          <input\r\n            className=\" display btn\"\r\n            readOnly\r\n            placeholder=\"0\"\r\n            value={this.state.display}\r\n          />\r\n          <div\r\n            className=\"btn clearBtn clickAble\"\r\n            onClick={() => {\r\n              this.operation(\"clear\");\r\n            }}\r\n          >\r\n            C\r\n          </div>\r\n          <div className=\"btn percentBtn\">%</div>\r\n          <div\r\n            className=\"btn divisonBtn clickAble\"\r\n            onClick={() => this.operation(\"divide\")}\r\n          >\r\n            &#247;\r\n          </div>\r\n          <div\r\n            className=\"btn sevenBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"7\")}\r\n          >\r\n            7\r\n          </div>\r\n          <div\r\n            className=\"btn eightBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"8\")}\r\n          >\r\n            8\r\n          </div>\r\n          <div\r\n            className=\"btn nineBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"9\")}\r\n          >\r\n            9\r\n          </div>\r\n          <div\r\n            className=\"btn multiplyBtn clickAble\"\r\n            onClick={() => {\r\n              this.operation(\"multiply\");\r\n            }}\r\n          >\r\n            x\r\n          </div>\r\n          <div\r\n            className=\"btn fourBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"4\")}\r\n          >\r\n            4\r\n          </div>\r\n          <div\r\n            className=\"btn fiveBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"5\")}\r\n          >\r\n            5\r\n          </div>\r\n          <div\r\n            className=\"btn sixBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"6\")}\r\n          >\r\n            6\r\n          </div>\r\n          <div\r\n            className=\"btn subtractBtn clickAble\"\r\n            onClick={() => {\r\n              this.operation(\"subtract\");\r\n            }}\r\n          >\r\n            &#8722;\r\n          </div>\r\n          <div\r\n            className=\"btn oneBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"1\")}\r\n          >\r\n            1\r\n          </div>\r\n          <div\r\n            className=\"btn twoBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"2\")}\r\n          >\r\n            2\r\n          </div>\r\n          <div\r\n            className=\"btn threeBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"3\")}\r\n          >\r\n            3\r\n          </div>\r\n          <div\r\n            className=\"btn additionBtn clickAble\"\r\n            onClick={() => {\r\n              this.operation(\"add\");\r\n            }}\r\n          >\r\n            +\r\n          </div>\r\n          <div\r\n            className=\"btn zeroBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\"0\")}\r\n          >\r\n            0\r\n          </div>\r\n          <div\r\n            className=\"btn dotBtn clickAble\"\r\n            onClick={() => this.numKeyInput(\".\")}\r\n          >\r\n            .\r\n          </div>\r\n          <div\r\n            className=\"btn equalBtn clickAble\"\r\n            onClick={() => {\r\n              this.operation(\"equal\");\r\n            }}\r\n          >\r\n            =\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\nimport \"./components/componentStyles/topSection.css\";\n\nfunction App() {\n  const littleCalculator = process.env.PUBLIC_URL + \"/cal.png\";\n  return (\n    <div className=\"App\">\n      <div className=\"topSection\">\n        <h1>React Calculator</h1>\n        <img src={littleCalculator} alt=\"little calculator iamge\" />\n      </div>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}